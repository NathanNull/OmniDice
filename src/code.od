/*die = 3d6 + 3;
res = {
    dice = die + die + die; dice.mean // 3d6
};
Bool_value = true;
a = 4%3;
a += 1_500_000;
b = if a < 3 {1} else if a == 2 {4} else {17};
while a > 2 {
    a -= 3;
}
a*/

/*let mut amogus = (1,"asdf",[5.0]);
amogus.i0 += 4;
amogus.i1 += "\nbeans";
amogus.i2 += [1.,3.];
amogus.i2[0,1] = [4.,5.];
amogus*/

/*let int = Ref && 1;
let mut arr = [int];
arr[0].inner += 1;
(int.inner, arr)*/

/*let mut i = ref(1);
let a = func (p1: bool, p2: int, p3: [float]) -> void {
    i.inner += 1;
    println("amogus");
} + func(p1: int) -> void {
    println("function overloading woooo");
};
a(false, 5, [2.6]);
a(0);
println("Value of i:", i.inner);*/

/*// Recursion baybeeee
let mut factorial = ref(func(param: int) -> int{error("did not, in fact, do the thing.");7});
factorial.inner = func(param: int) -> int {
    if param <= 1 {
        1
    } else {
        factorial(param-1)*param
    }
};
let mut i = 0;
while true {
    println("{}! = {}", i, factorial(i));
    i += 1;
}*/

let arr = [1,2,3];
while arr.length > 0 {
    println("Popped {}", arr.pop());
}
arr